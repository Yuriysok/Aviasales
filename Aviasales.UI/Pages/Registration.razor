@page "/register"
@using FluentValidation

<MudCard>
    <MudForm Model="@model" @ref="@form" Validation="@(registerValidator.ValidateValue)" ValidationDelay="0">
        <MudCardContent>
            <MudTextField @bind-Value="model.Name"
                          For="@(() => model.Name)"
                          Immediate="true"
                          Label="Name" />

            <MudTextField @bind-Value="model.Password"
                          For="@(() => model.Password)"
                          Immediate="true"
                          Label="Password" />

            <MudTextField @bind-Value="model.PassportSerialNumber"
                          For="@(() => model.PassportSerialNumber)"
                          Immediate="true"
                          Label="Passport serial number" />
        </MudCardContent>
    </MudForm>
    <MudCardActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(async () => await Submit())">Register</MudButton>
    </MudCardActions>
</MudCard>

@code {
    MudForm? form;

    RegisterModelFluentValidator registerValidator = new RegisterModelFluentValidator();

    RegistrerVM model = new();

    private async Task Submit()
    {
        await form!.Validate();
    }

    /// <summary>
    /// A standard AbstractValidator which contains multiple rules and can be shared with the back end API
    /// </summary>
    /// <typeparam name="OrderModel"></typeparam>
    public class RegisterModelFluentValidator : AbstractValidator<RegistrerVM>
    {
        public RegisterModelFluentValidator()
        {
            RuleFor(x => x.Name)
                .NotEmpty()
                .Length(1, 100);

            RuleFor(x => x.Password)
            .NotEmpty()
            .Length(1, 100);

            RuleFor(x => x.PassportSerialNumber)
                .NotEmpty()
                .Length(1, 100);
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<RegistrerVM>.CreateWithOptions((RegistrerVM)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }
}